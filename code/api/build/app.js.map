{"version":3,"sources":["../app.js"],"names":["environment","process","env","NODE_ENV","config","configurations","apollo","ApolloServer","typeDefs","resolvers","context","models","app","use","applyMiddleware","server","ssl","console","log","http","createServer","sequelize","sync","then","listen","port","hostname","graphqlPath","catch","err"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAcC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,MAA5C,C,CAAoD;AACpD,IAAMC,SAASC,iBAAeL,WAAf,CAAf;;AAEA,IAAMM,SAAS,IAAIC,iCAAJ,CAAiB;AAC9BC,YAAU,8BAAIA,gBAAJ,CADoB;AAE9BC,gCAF8B;AAG9BC,WAAS,EAAEC,wBAAF;AAHqB,CAAjB,CAAf;;AAMA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,qBAAR;;AAEAP,OAAOQ,eAAP,CAAuB,EAAEF,QAAF,EAAvB;;AAEA,IAAIG,MAAJ;AACA,IAAIX,OAAOY,GAAX,EAAgB;AACdC,UAAQC,GAAR,CACE,sHADF;AAGD,CAJD,MAIO;AACLH,WAASI,eAAKC,YAAL,CAAkBR,GAAlB,CAAT;AACD;;AAEDD,iBAAOU,SAAP,CACGC,IADH,GAEGC,IAFH,CAEQ,eAAO;AACXR,SAAOS,MAAP,CAAc,EAAEC,MAAMrB,OAAOqB,IAAf,EAAd,EAAqC,YAAM;AACzCR,YAAQC,GAAR,CACE,qBADF,YAESd,OAAOY,GAAP,GAAa,GAAb,GAAmB,EAF5B,YAEoCZ,OAAOsB,QAF3C,SAEuDtB,OAAOqB,IAF9D,GAGInB,OAAOqB,WAHX;AAMD,GAPD;AAQD,CAXH,EAYGC,KAZH,CAYS,eAAO;AACZX,UAAQC,GAAR,CAAY,+BAA+BW,GAA3C;AACD,CAdH","file":"app.js","sourcesContent":["import express from 'express';\nimport { ApolloServer, gql } from 'apollo-server-express';\nimport typeDefs from './graphql/schemas/schema';\nimport resolvers from './graphql/resolvers/resolvers';\nimport models from './models';\nimport configurations from './config/config';\nimport cors from 'cors';\nimport http from 'http';\n\nconst environment = process.env.NODE_ENV || 'test'; // Change this Jessie\nconst config = configurations[environment];\n\nconst apollo = new ApolloServer({\n  typeDefs: gql(typeDefs),\n  resolvers,\n  context: { models }\n});\n\nconst app = express();\napp.use(cors());\n\napollo.applyMiddleware({ app });\n\nvar server;\nif (config.ssl) {\n  console.log(\n    'SSL not yet supported. Please refer to this link: https://www.apollographql.com/docs/apollo-server/essentials/server'\n  );\n} else {\n  server = http.createServer(app);\n}\n\nmodels.sequelize\n  .sync()\n  .then(res => {\n    server.listen({ port: config.port }, () => {\n      console.log(\n        'ðŸš€  Server ready at',\n        `http${config.ssl ? 's' : ''}://${config.hostname}:${config.port}${\n          apollo.graphqlPath\n        }`\n      );\n    });\n  })\n  .catch(err => {\n    console.log('Failed to run the server: ' + err);\n  });\n"]}